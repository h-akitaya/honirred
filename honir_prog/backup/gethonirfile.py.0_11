#!/usr/local/bin/python
#
#  gethonirfile.py
#
#    Ver  0.10  2014/4/11 H. Akitaya
#    Ver  0.11  2014/4/14 H. Akitaya (bug fix for raw image)
#
#   usage: gethonirfile.py (date) (object) (obsmode)
#

import sys
import pyfits
import os.path
import glob
import copy
import datetime
import shutil

BASE_DIR = "/mnt/obsdata"

class HeaderInfo( object ):
    def __init__( self ):
        self.object = ""
        self.filter = ""
        self.hnarm = ""
        self.exptime = ""
        self.nprs = ""
        self.spv = ""
        self.obsmode = ""
        self.specmode = ""
    def readHeaderInfo( self, filename ):
        hdulist = pyfits.open( filename )
        if hdulist[0].header.has_key['OBJECT']:
            self.object = hdulist[0].header['OBJECT'] 
        if hdulist[0].header.has_key['HN-ARM']:
            self.hnarm = hdulist[0].header['HN-ARM'] 
        if hdulist[0].header.has_key['NPRS']:
            self.nprs = int( hdulist[0].header['NPRS'] )
        if hdulist[0].header.has_key['EXPTIME']:
            self.exptime = float( hdulist[0].header['EXPTIME'] )
        if hdulist[0].header.has_key['SPV']:
            self.spv = hdulist[0].header['SPV'] 
        if hdulist[0].header.has_key['OBSMODE']:
            self.obsmode = hdulist[0].header['OBSMODE']
        if ( hdulist[0].header.has_key['HN-ARM'] & hdulist[0][0].header.has_key['WH_IRAF2'] &
             hdulist[0].header.has_key['WH_OPTF2'] ):
            if hdulist[0].header['HN-ARM'] == 'ira' :
                self.filter = hdulist.header['WH_IRAF2']
            elif hdulist[0].header['HN-ARM'] == 'opt' :
                self.filter = hdulist.header['WH_OPTF2']
            if ( hdulist[0].header['WH_IRAF1'] == "grism IRshort" &
                 hdulist.header['HN-ARM'] == "ira" ):
                self.specmode = "irs"
            elif ( hdulist[0].header['WH_IRAF1'] == "grism IRlong" &
                   hdulist.header['HN-ARM'] == "ira" ):
                self.specmode = "irl"
            elif ( hdulist[0].header['WH_OPTF1'] == "grism Opt" &
                   hdulist.header['HN-ARM'] == "opt" ):
                self.specmode = "opt"
        hdulist.close()
        
class HonirFileList( object ):
    def __init__( self ):
        self.filelist = []
        self.selectedlist = []
        self.infolist = []
        self.getFileList()
        self.resetSelectedList()
    def readInfoList( self ):
        files= iter( self.selectedlist )
        for filename in files:
            headerinfo = HeaderInfo()
            self.infolist[ filename ] = headerinfo.readHeaderInfo( filename )
    def getFileList( self ):
        self.filelist = sorted( glob.glob( os.path.join( datadir, "HN???????????????.fits" ) ) )
    def getSelectedList( self ):
        return self.filterdlist
    def resetSelectedList( self ):
        self.selectedlist = copy.deepcopy( self.filelist )
    def selectExpt( self, exptime ):
        self.select( "Expt", exptime )
    def selectObject( self, objname ):
        self.select( "Object", objname )
    def selectObsmode( self, obsmode ):
        self.select( "Obsmode", obsmode )
    def selectArm( self, arm ):
        self.select( "Arm", arm )
    def selectFilter( self, filtername ):
        self.select( "Filter", filtername )
#    def getHduHeader( hdulist, key ):
        return hdulist[0].header[key]
    def select( self, infotype, key1="", key2="" ):
        new_filelist=[]
        files= iter( self.selectedlist )
        for filename in files:
            hdulist = pyfits.open( os.path.join( datadir, filename) )
            if infotype == "Object":
                if hdulist[0].header['OBJECT'] == key1 : 
                    new_filelist.append( filename )
            elif infotype == "Obsmode":
                if hdulist[0].header['OBS-MODE'] == key1 :
                    new_filelist.append( filename )
            elif infotype == "Arm":
                if hdulist[0].header['HN-ARM'] == key1 :
                    new_filelist.append( filename )
            elif infotype == "Expt":
                if float( hdulist[0].header['EXPTIME'] ) == float( key1 ) :
                    new_filelist.append( filename )
            elif infotype == "Nprs":
                if int( hdulist[0].header['IRA-NPRS'] ) == int( key1 ):
                    new_filelist.append( filename )
            elif infotype == "SPV":
                if hdulist[0].header['SPV'] == key1 :
                    new_filelist.append( filename )
            elif infotype == "Filter":
                if hdulist[0].header['HN-ARM'] == 'ira' :
                    if hdulist[0].header['WH_IRAF2'] == key1 :
                        new_filelist.append( filename )
                elif hdulist[0].header['HN-ARM'] == 'opt' :
                    if hdulist[0].header['WH_OPTF2'] == key1 :
                        new_filelist.append( filename )
                else:
                    pass
            elif infotype == "SpecMode":
                specmode = key1
                if specmode == "irs":
                    if ( hdulist[0].header['WH_IRAF1'] == "grism IRshort" &
                         hdulist[0].header['HN-ARM'] == "ira" ):
                        new_filelist.append( filename )
                elif specmode == "irl":
                    if ( hdulist[0].header['WH_IRAF1'] == "grism IRlong" &
                         hdulist[0].header['HN-ARM'] == "ira" ):
                        new_filelist.append( filename )
                elif specmode == "opt":
                    if ( hdulist[0].header['WH_OPTF1'] == "grism Opt" &
                         hdulist[0].header['HN-ARM'] == "opt" ):
                        new_filelist.append( filename )
            hdulist.close()
        self.selectedlist = new_filelist
    def chkopt( self ):
        has_opt_flag = False
        files = iter( self.selectedlist )
        for filename in files:
            hdulist = pyfits.open( os.path.join( datadir, filename ) )
            if hdulist[0].header['HN-ARM'] == 'opt': 
                has_opt_flag = True
            hdulist.close()
        return has_opt_flag
    def showList( self ):
        files = iter( self.selectedlist )
        for filename in files:
            print filename
    def getExptArray( self, arm ):
        expt_array =[]
        files = iter( self.selectedlist )
        for filename in files:
            hdulist = pyfits.open( os.path.join( datadir, filename ) )
            expt = float( hdulist[0].header['EXPTIME'] )
            if expt in expt_array:
                pass
            else:
                if( (arm != "") & (arm != hdulist[0].header['HN-ARM'] )):
                    pass
                else:
                    expt_array.append( expt )
        return expt_array
    def empty( self ):
        self.selectedlist = []

argvs=sys.argv
argc= len(argvs)

date_str = argvs[1]

datadir= os.path.join( BASE_DIR, date_str )
if os.path.exists( datadir ) == False :
    print( 'Invalid data dir')
    quit()


#print len(filelist)
#files= iter( filelist )

objname=argvs[2]
obsmode=argvs[3]

#filelist.selectObject( objname )

list_object = HonirFileList()
list_object.resetSelectedList
list_object.selectObject( objname )
list_object.selectObsmode( obsmode )

#files = iter( filelist.selectedlist )
#for fn in files:
#    print fn

# opt image check
#print filelist.has_opt
hasopt = list_object.chkopt()
bias_list = HonirFileList()
if hasopt:
    bias_list.selectArm( 'opt' )
    bias_list.selectObject( "BIAS" )
#    print bias_list.selectedlist
#    bias_list.showList()
else:
    bias_list.empty()

# dark image check
expt_array = list_object.getExptArray("ira")
#print u"Dark exposure time: %d" %  expt_array

darklists =[]
expts = iter( expt_array )
for expt in expts:
    darklist = HonirFileList()
    darklist.selectArm( 'ira' )
    darklist.selectObject( 'DARK' )
    darklist.selectExpt( expt )
    darklists.append( copy.copy( darklist.selectedlist ) )

list_all = []
list_all.extend( list_object.selectedlist )
list_all.extend( bias_list.selectedlist )
lists = iter( darklists )
for elem in lists:
    pass
    list_all.extend( elem )

list_all = sorted( list(set( list_all )) )

for file in list_all:
    print u"cp %s ." % file
    shutil.copy2( file, "." )

#if __name__ == "__main__":
